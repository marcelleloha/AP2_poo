Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c480f901-a18e-4420-baea-2bb3df9697f4\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"Marcelle Lohane &lt;162730528+marcelleloha@users.noreply.github.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;marcelleloha&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/marcelleloha/AP2_poo.git\",\r\n    \"accountId\": \"2d8048f9-e6ab-4d12-93c0-195f2ee2ae6b\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2y6rgChdbRry7f9T2n0hctQEQEO\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;editor.preferences.appearance&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26094.121\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-b26f3e71634d-JavaScript-IU-251.26094.121\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c480f901-a18e-4420-baea-2bb3df9697f4\" name=\"Changes\" comment=\"\" />\r\n      <created>1749165975956</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1749165975956</updated>\r\n      <workItem from=\"1749393126513\" duration=\"48000\" />\r\n      <workItem from=\"1749393199848\" duration=\"3821000\" />\r\n      <workItem from=\"1749406088666\" duration=\"2238000\" />\r\n      <workItem from=\"1749412552534\" duration=\"190000\" />\r\n      <workItem from=\"1749586808120\" duration=\"149000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"midias e localizacoes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1749396926592</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1749396926592</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"finalizando DenunciaDAO\" />\r\n    <MESSAGE value=\"classes midias e localizacao\" />\r\n    <MESSAGE value=\"midas e localizacao\" />\r\n    <MESSAGE value=\"midias e localizacoes\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"midias e localizacoes\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/.idea/workspace.xml	(date 1749598009801)
@@ -5,12 +5,22 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c480f901-a18e-4420-baea-2bb3df9697f4" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/SistemaDenuncias/src/dao/ComentarioDAO.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SistemaDenuncias/src/dao/EnderecoFixoDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/SistemaDenuncias/src/dao/EnderecoFixoDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SistemaDenuncias/src/modelo/Comentario.java" beforeDir="false" afterPath="$PROJECT_DIR$/SistemaDenuncias/src/modelo/Comentario.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="PREVIOUS_COMMIT_AUTHORS">
@@ -26,12 +36,12 @@
     &quot;assignee&quot;: &quot;marcelleloha&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/marcelleloha/AP2_poo.git",
-    "accountId": "2d8048f9-e6ab-4d12-93c0-195f2ee2ae6b"
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/marcelleloha/AP2_poo.git&quot;,
+    &quot;accountId&quot;: &quot;5e176b60-0dc6-48c7-a306-0b90015b38bd&quot;
   }
-}]]></component>
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 8
 }</component>
@@ -56,14 +66,6 @@
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
 }</component>
-  <component name="SharedIndexes">
-    <attachedChunks>
-      <set>
-        <option value="bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26094.121" />
-        <option value="bundled-js-predefined-d6986cc7102b-b26f3e71634d-JavaScript-IU-251.26094.121" />
-      </set>
-    </attachedChunks>
-  </component>
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
       <changelist id="c480f901-a18e-4420-baea-2bb3df9697f4" name="Changes" comment="" />
@@ -75,7 +77,6 @@
       <workItem from="1749393199848" duration="3821000" />
       <workItem from="1749406088666" duration="2238000" />
       <workItem from="1749412552534" duration="190000" />
-      <workItem from="1749586808120" duration="149000" />
     </task>
     <task id="LOCAL-00001" summary="midias e localizacoes">
       <option name="closed" value="true" />
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1749597883577)
+++ b/.idea/.name	(date 1749597883577)
@@ -0,0 +1,1 @@
+workspace.xml
\ No newline at end of file
Index: SistemaDenuncias/src/dao/EnderecoFixoDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport modelo.Denuncia;\r\nimport modelo.EnderecoFixo;\r\nimport modelo.Midia;\r\nimport modelo.Usuario;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class EnderecoFixoDAO implements BaseDAO {\r\n    private Connection connection;\r\n\r\n    public EnderecoFixoDAO(Connection connection) {\r\n        this.connection = connection;\r\n    }\r\n\r\n    @Override\r\n    public void salvar(Object objeto) {\r\n        if (!(objeto instanceof EnderecoFixo)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Endereço Fixo.\");\r\n        }\r\n\r\n        EnderecoFixo enderecoFixo = (EnderecoFixo) objeto;\r\n\r\n        try {\r\n            String sql = \"INSERT INTO endereco_fixo (idDenuncia, cep, rua, numero, bairro, cidade, estado) VALUES (?, ?, ?, ?, ?, ?, ?)\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n                pstm.setObject(1, enderecoFixo.getDenuncia().getIdDenuncia());\r\n                pstm.setString(2, enderecoFixo.getCep());\r\n                pstm.setString(3, enderecoFixo.getRua());\r\n                pstm.setString(4, enderecoFixo.getNumero());\r\n                pstm.setString(5, enderecoFixo.getBairro());\r\n                pstm.setString(6, enderecoFixo.getCidade());\r\n                pstm.setString(7, enderecoFixo.getEstado());\r\n\r\n                pstm.execute();\r\n                try (ResultSet rst = pstm.getGeneratedKeys()) {\r\n                    while (rst.next()) {\r\n                        enderecoFixo.setIdEndereco(rst.getInt(1));\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public Object buscarPorId(int id) {\r\n        DenunciaDAO ddao = new DenunciaDAO(connection);\r\n        try {\r\n            String sql = \"SELECT idEndereco, idDenuncia, cidade, estado, cep, rua, numero, bairro FROM endereco_fixo WHERE idEndereco = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n\r\n                pstm.execute();\r\n                ResultSet rst = pstm.getResultSet();\r\n                while (rst.next()) {\r\n                    int idEndereco = rst.getInt(\"idEndereco\");\r\n                    int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);\r\n                    String cidade = rst.getString(\"cidade\");\r\n                    String estado = rst.getString(\"estado\");\r\n                    String cep = rst.getString(\"cep\");\r\n                    String rua = rst.getString(\"rua\");\r\n                    String numero = rst.getString(\"numero\");\r\n                    String bairro = rst.getString(\"bairro\");\r\n\r\n\r\n                    return new EnderecoFixo(idEndereco, denuncia, cidade, estado, cep, rua, numero, bairro);\r\n                }\r\n            }\r\n            return null;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Object> listarTodosLazyLoading() {\r\n        DenunciaDAO ddao = new DenunciaDAO(connection);\r\n\r\n        ArrayList<Object> enderecos = new ArrayList<>();\r\n\r\n        try {\r\n            String sql = \"SELECT idEndereco, idDenuncia, cidade, estado, cep, rua, numero, bairro FROM endereco_fixo\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.execute();\r\n                ResultSet rst = pstm.getResultSet();\r\n                while (rst.next()) {\r\n                    int idEndereco = rst.getInt(\"idEndereco\");\r\n                    int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);\r\n                    String cidade = rst.getString(\"cidade\");\r\n                    String estado = rst.getString(\"estado\");\r\n                    String cep = rst.getString(\"cep\");\r\n                    String rua = rst.getString(\"rua\");\r\n                    String numero = rst.getString(\"numero\");\r\n                    String bairro = rst.getString(\"bairro\");\r\n                    EnderecoFixo e = new EnderecoFixo(idEndereco, denuncia, cidade, estado, cep, rua, numero, bairro);\r\n                    enderecos.add(e);\r\n                }\r\n            }\r\n            return enderecos;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Object> listarTodosEagerLoading() {\r\n        return listarTodosLazyLoading();\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(Object objeto) {\r\n        if (!(objeto instanceof EnderecoFixo)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Midia.\");\r\n        }\r\n\r\n        EnderecoFixo enderecoFixo = (EnderecoFixo) objeto;\r\n\r\n        String sql = \"UPDATE endereco_fixo SET idDenuncia = ?, cidade = ?, estado = ?, cep = ?, rua = ?, numero = ?, bairro = ? WHERE idMidia = ?\";\r\n\r\n        try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n\r\n            pstm.setInt(1, enderecoFixo.getDenuncia().getIdDenuncia());\r\n            pstm.setString(2, enderecoFixo.getCidade());\r\n            pstm.setString(3, enderecoFixo.getEstado());\r\n            pstm.setString(5, enderecoFixo.getCep());\r\n            pstm.setString(6, enderecoFixo.getRua());\r\n            pstm.setString(7, enderecoFixo.getNumero());\r\n            pstm.setString(3, enderecoFixo.getBairro());\r\n\r\n            int linhasAfetadas = pstm.executeUpdate();\r\n\r\n            if (linhasAfetadas == 0) {\r\n                throw new SQLException(\"Falha ao atualizar: nenhuma linha foi afetada.\");\r\n            }\r\n\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(\"Erro ao atualizar endereco: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void excluir(int id) {\r\n        try {\r\n            String sql = \"DELETE FROM endereco_fixo WHERE idEndereco = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n\r\n                int linhasAfetadas = pstm.executeUpdate();\r\n\r\n                if (linhasAfetadas == 0) {\r\n                    throw new SQLException(\"Falha ao deletar: nenhuma linha foi afetada.\");\r\n                }\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    }\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/dao/EnderecoFixoDAO.java b/SistemaDenuncias/src/dao/EnderecoFixoDAO.java
--- a/SistemaDenuncias/src/dao/EnderecoFixoDAO.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/dao/EnderecoFixoDAO.java	(date 1749598063450)
@@ -1,110 +1,130 @@
 package dao;
 
-import modelo.Denuncia;
-import modelo.EnderecoFixo;
-import modelo.Midia;
-import modelo.Usuario;
+import modelo.*;
 
 import java.sql.*;
+import java.time.LocalDateTime;
 import java.util.ArrayList;
 
-public class EnderecoFixoDAO implements BaseDAO {
+public class EnderecoFixoDAO {
     private Connection connection;
 
     public EnderecoFixoDAO(Connection connection) {
         this.connection = connection;
     }
 
-    @Override
-    public void salvar(Object objeto) {
+    public void salvar(Object objeto){
+
         if (!(objeto instanceof EnderecoFixo)) {
-            throw new IllegalArgumentException("Objeto deve ser do tipo Endereço Fixo.");
+            throw new IllegalArgumentException("Objeto deve ser do tipo Endereco.");
         }
 
-        EnderecoFixo enderecoFixo = (EnderecoFixo) objeto;
+        EnderecoFixo endereco = (EnderecoFixo) objeto;
 
-        try {
-            String sql = "INSERT INTO endereco_fixo (idDenuncia, cep, rua, numero, bairro, cidade, estado) VALUES (?, ?, ?, ?, ?, ?, ?)";
+        try{
+            String sql = "INSERT INTO endereco_fixo (cidade, estado, cep, rua, numero, bairro) VALUES(?,?,?,?,?,?)";
 
-            try (PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
-                pstm.setObject(1, enderecoFixo.getDenuncia().getIdDenuncia());
-                pstm.setString(2, enderecoFixo.getCep());
-                pstm.setString(3, enderecoFixo.getRua());
-                pstm.setString(4, enderecoFixo.getNumero());
-                pstm.setString(5, enderecoFixo.getBairro());
-                pstm.setString(6, enderecoFixo.getCidade());
-                pstm.setString(7, enderecoFixo.getEstado());
+            try(PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
+
+                pstm.setString(1, endereco.getCidade()); //Define o primeiro ?
+                pstm.setString(2, endereco.getEstado()); //Define o segundo ?
+                pstm.setString(3, endereco.getCep()); //Define o terceiro ?
+                pstm.setString(4, endereco.getRua());
+                pstm.setString(5, endereco.getNumero());
+                pstm.setString(6, endereco.getBairro());
 
                 pstm.execute();
+
                 try (ResultSet rst = pstm.getGeneratedKeys()) {
                     while (rst.next()) {
-                        enderecoFixo.setIdEndereco(rst.getInt(1));
+                        endereco.setIdEndereco(rst.getInt(1));
                     }
                 }
             }
-
         } catch (SQLException e) {
             throw new RuntimeException(e);
         }
-
     }
 
-    @Override
-    public Object buscarPorId(int id) {
-        DenunciaDAO ddao = new DenunciaDAO(connection);
+    public boolean existeEnderecoIgual(EnderecoFixo endereco){
+        try{
+            String sql ="""
+                        SELECT *
+                        FROM endereco_fixo as ef
+                        WHERE ef.cep = ? and ef.numero = ? and ef.bairro = ? and ef.cidade = ? and ef.estado = ? and rua = ?
+                        """;
+            try(PreparedStatement pstm = connection.prepareStatement(sql)){
+                pstm.setString(1, endereco.getCep());
+                pstm.setString(2, endereco.getNumero());
+                pstm.setString(3, endereco.getBairro());
+                pstm.setString(4, endereco.getCidade());
+                pstm.setString(5, endereco.getEstado());
+                pstm.setString(6, endereco.getRua());
+
+                try (ResultSet rst = pstm.executeQuery()) {
+                    return rst.next(); // Retorna true se encontrou ao menos uma linha
+                }
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public EnderecoFixo buscarPorId(int id){
+        EnderecoFixo endereco = null;
+
         try {
-            String sql = "SELECT idEndereco, idDenuncia, cidade, estado, cep, rua, numero, bairro FROM endereco_fixo WHERE idEndereco = ?";
-
+
+            String sql ="""
+                        SELECT cidade, estado, cep, rua, numero, bairro
+                        FROM endereco_fixo
+                        WHERE idEndereco = ?
+                        """;
             try (PreparedStatement pstm = connection.prepareStatement(sql)) {
                 pstm.setInt(1, id);
-
                 pstm.execute();
-                ResultSet rst = pstm.getResultSet();
-                while (rst.next()) {
-                    int idEndereco = rst.getInt("idEndereco");
-                    int idDenuncia = rst.getInt("idDenuncia");
-                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);
-                    String cidade = rst.getString("cidade");
-                    String estado = rst.getString("estado");
-                    String cep = rst.getString("cep");
-                    String rua = rst.getString("rua");
-                    String numero = rst.getString("numero");
-                    String bairro = rst.getString("bairro");
+                try(ResultSet rst = pstm.getResultSet()){
+                    while (rst.next()){
+                        if (endereco == null){
+                            String cidade = rst.getString("cidade");
+                            String estado = rst.getString("estado");
+                            String cep = rst.getString("cep");
+                            String rua = rst.getString("rua");
+                            String numero = rst.getString("numero");
+                            String bairro = rst.getString("bairro");
 
-
-                    return new EnderecoFixo(idEndereco, denuncia, cidade, estado, cep, rua, numero, bairro);
+                            endereco = new EnderecoFixo(cidade, estado, cep, rua, numero, bairro);
+                        }
+                    }
                 }
             }
-            return null;
+            return endereco;
+
         } catch (SQLException e) {
             throw new RuntimeException(e);
         }
     }
 
-    @Override
     public ArrayList<Object> listarTodosLazyLoading() {
-        DenunciaDAO ddao = new DenunciaDAO(connection);
-
         ArrayList<Object> enderecos = new ArrayList<>();
 
         try {
-            String sql = "SELECT idEndereco, idDenuncia, cidade, estado, cep, rua, numero, bairro FROM endereco_fixo";
+            String sql = "SELECT cidade, estado, cep, rua, numero, bairro FROM endereco_fixo";
 
             try (PreparedStatement pstm = connection.prepareStatement(sql)) {
                 pstm.execute();
                 ResultSet rst = pstm.getResultSet();
                 while (rst.next()) {
-                    int idEndereco = rst.getInt("idEndereco");
-                    int idDenuncia = rst.getInt("idDenuncia");
-                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);
                     String cidade = rst.getString("cidade");
                     String estado = rst.getString("estado");
                     String cep = rst.getString("cep");
                     String rua = rst.getString("rua");
                     String numero = rst.getString("numero");
                     String bairro = rst.getString("bairro");
-                    EnderecoFixo e = new EnderecoFixo(idEndereco, denuncia, cidade, estado, cep, rua, numero, bairro);
-                    enderecos.add(e);
+
+
+                    EnderecoFixo endereco = new EnderecoFixo(cidade, estado, cep, rua, numero, bairro);
+                    enderecos.add(endereco);
                 }
             }
             return enderecos;
@@ -113,30 +133,24 @@
         }
     }
 
-    @Override
-    public ArrayList<Object> listarTodosEagerLoading() {
-        return listarTodosLazyLoading();
-    }
-
-    @Override
     public void atualizar(Object objeto) {
         if (!(objeto instanceof EnderecoFixo)) {
-            throw new IllegalArgumentException("Objeto deve ser do tipo Midia.");
+            throw new IllegalArgumentException("Objeto deve ser do tipo EnderecoFixo.");
         }
 
-        EnderecoFixo enderecoFixo = (EnderecoFixo) objeto;
+        EnderecoFixo endereco = (EnderecoFixo) objeto;
 
-        String sql = "UPDATE endereco_fixo SET idDenuncia = ?, cidade = ?, estado = ?, cep = ?, rua = ?, numero = ?, bairro = ? WHERE idMidia = ?";
+        // Atualizar os dados principais da denúncia
+        String sql = "UPDATE endereco_fixo SET cep = ? and numero = ? and bairro = ? and cidade = ? and estado = ? and rua = ?";
 
         try (PreparedStatement pstm = connection.prepareStatement(sql)) {
 
-            pstm.setInt(1, enderecoFixo.getDenuncia().getIdDenuncia());
-            pstm.setString(2, enderecoFixo.getCidade());
-            pstm.setString(3, enderecoFixo.getEstado());
-            pstm.setString(5, enderecoFixo.getCep());
-            pstm.setString(6, enderecoFixo.getRua());
-            pstm.setString(7, enderecoFixo.getNumero());
-            pstm.setString(3, enderecoFixo.getBairro());
+            pstm.setString(1, endereco.getCep());
+            pstm.setString(2, endereco.getNumero());
+            pstm.setString(3, endereco.getBairro());
+            pstm.setString(4, endereco.getCidade());
+            pstm.setString(5, endereco.getEstado());
+            pstm.setString(6, endereco.getRua());
 
             int linhasAfetadas = pstm.executeUpdate();
 
@@ -144,14 +158,12 @@
                 throw new SQLException("Falha ao atualizar: nenhuma linha foi afetada.");
             }
 
-
         } catch (SQLException e) {
             e.printStackTrace();
-            throw new RuntimeException("Erro ao atualizar endereco: " + e.getMessage());
+            throw new RuntimeException("Erro ao atualizar denuncia: " + e.getMessage());
         }
     }
 
-    @Override
     public void excluir(int id) {
         try {
             String sql = "DELETE FROM endereco_fixo WHERE idEndereco = ?";
@@ -170,7 +182,4 @@
             throw new RuntimeException(e);
         }
     }
-
-    }
-
-
+}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1749597806608)
+++ b/.idea/.gitignore	(date 1749597806608)
@@ -0,0 +1,10 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Environment-dependent path to Maven home directory
+/mavenHomeManager.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: SistemaDenuncias/src/modelo/EnderecoFixo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package modelo;\r\n\r\npublic class EnderecoFixo extends Localizacao {\r\n    private String cep;\r\n    private String rua;\r\n    private String numero;\r\n    private String bairro;\r\n\r\n    public EnderecoFixo(Denuncia denuncia, String cidade, String estado, String cep, String rua, String numero, String bairro) {\r\n        super(denuncia, cidade, estado);\r\n        this.cep = cep;\r\n        this.rua = rua;\r\n        this.numero = numero;\r\n        this.bairro = bairro;\r\n    }\r\n\r\n    // construtor do banco\r\n    public EnderecoFixo(int idEndereco, Denuncia denuncia, String cidade, String estado, String cep, String rua, String numero, String bairro) {\r\n        super(denuncia, cidade, estado);\r\n        this.cep = cep;\r\n        this.rua = rua;\r\n        this.numero = numero;\r\n        this.bairro = bairro;\r\n    }\r\n\r\n\r\n    public String getCep() {\r\n        return cep;\r\n    }\r\n\r\n    public String getRua() {\r\n        return rua;\r\n    }\r\n\r\n    public String getNumero() {\r\n        return numero;\r\n    }\r\n\r\n    public String getBairro() {\r\n        return bairro;\r\n    }\r\n\r\n    @Override\r\n    public String formatar() {\r\n        return \"Cep: \" + this.cep + \", Rua: \" + this.rua + \", Numero: \" + this.numero + \", Bairro: \" + this.bairro;\r\n    }\r\n\r\n    public void setIdEndereco(int IdEndereco) {\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/modelo/EnderecoFixo.java b/SistemaDenuncias/src/modelo/EnderecoFixo.java
--- a/SistemaDenuncias/src/modelo/EnderecoFixo.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/modelo/EnderecoFixo.java	(date 1749597749835)
@@ -1,10 +1,16 @@
 package modelo;
 
+import dao.DenunciaDAO;
+import dao.EnderecoFixoDAO;
+
+import java.sql.Connection;
+
 public class EnderecoFixo extends Localizacao {
     private String cep;
     private String rua;
     private String numero;
     private String bairro;
+    private int idEndereco;
 
     public EnderecoFixo(Denuncia denuncia, String cidade, String estado, String cep, String rua, String numero, String bairro) {
         super(denuncia, cidade, estado);
@@ -40,6 +46,21 @@
         return bairro;
     }
 
+    public void setIdEndereco(int id){ idEndereco = id; }
+
+    public boolean persistirEndereco(Connection connection) {
+        // verificar se já existe outra denúncia igual no sistema (mesma categoria e local) antes de criar. se já houver uma igual, retorna false
+        EnderecoFixoDAO ddao = new EnderecoFixoDAO(connection);
+        if (!ddao.existeEnderecoIgual(this)) {
+            ddao.salvar(this);
+            System.out.println("Denúncia salva no banco de dados com sucesso!");
+            return true;
+        } else {
+            System.out.println("Já existe uma denúncia com mesma categoria no mesmo local!");
+            return false;
+        }
+    }
+
     @Override
     public String formatar() {
         return "Cep: " + this.cep + ", Rua: " + this.rua + ", Numero: " + this.numero + ", Bairro: " + this.bairro;
Index: SistemaDenuncias/src/dao/DenunciaDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport modelo.*;\r\n\r\nimport java.sql.*;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\n\r\npublic class DenunciaDAO implements BaseDAO{\r\n    private Connection connection;\r\n\r\n    public DenunciaDAO(Connection connection) {\r\n        this.connection = connection;\r\n    }\r\n\r\n\r\n    public void salvar(Object objeto) {\r\n\r\n        if (!(objeto instanceof Denuncia)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Denuncia.\");\r\n        }\r\n\r\n        Denuncia denuncia = (Denuncia) objeto;\r\n\r\n        try {\r\n            String sql = \"INSERT INTO denuncia (idCriador, titulo, categoria, descricao, dtDenuncia) VALUES (?, ?, ?, ?, ?)\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n                pstm.setInt(1, denuncia.getCriador().getIdUsuario());\r\n                pstm.setString(2, denuncia.getTitulo());\r\n                pstm.setString(3, denuncia.getCategoria().name());\r\n                pstm.setString(4, denuncia.getDescricao());\r\n                pstm.setObject(5, denuncia.getData());\r\n\r\n                pstm.execute();\r\n\r\n                try (ResultSet rst = pstm.getGeneratedKeys()) {\r\n                    while (rst.next()) {\r\n                        denuncia.setIdDenuncia(rst.getInt(1));\r\n                    }\r\n                }\r\n\r\n                // Salvar os votos e confirmações separadamente, já que estão em tabelas separadas\r\n                salvarVotos(denuncia);\r\n                salvarConfirmacoes(denuncia);\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public boolean existeDenunciaIgual (Denuncia denuncia) {\r\n        String sql;\r\n        if (denuncia.getLocalizacao() instanceof EnderecoFixo localizacao) {\r\n            sql = \"\"\"\r\n                    SELECT d.categoria, ef.cep, ef.numero, ef.bairro, ef.cidade, ef.estado\r\n                    FROM denuncia as d\r\n                    JOIN endereco_fixo as ef on d.idDenuncia = ef.idDenuncia\r\n                    WHERE d.categoria = ? and ef.cep = ? and ef.numero = ? and ef.bairro = ? and ef.cidade = ? and ef.estado = ?;\r\n                    \"\"\";\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setString(1, denuncia.getCategoria().name());\r\n                pstm.setString(2, localizacao.getCep());\r\n                pstm.setString(3, localizacao.getNumero());\r\n                pstm.setString(4, localizacao.getBairro());\r\n                pstm.setString(5, localizacao.getCidade());\r\n                pstm.setString(6, localizacao.getEstado());\r\n\r\n                try (ResultSet rst = pstm.executeQuery()) {\r\n                    return rst.next(); // Retorna true se encontrou ao menos uma linha\r\n                }\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        } else if (denuncia.getLocalizacao() instanceof Coordenadas localizacao) {\r\n            sql = \"\"\"\r\n                    SELECT d.idDenuncia, d.categoria, c.latitude, c.longitude, c.cidade, c.estado\r\n                    FROM denuncia as d\r\n                    JOIN coordenadas as c on d.idDenuncia = c.idDenuncia\r\n                    WHERE d.categoria = ? and ABS(c.latitude - ?) < 0.00005 and ABS(c.longitude - ?) < 0.00005 and c.cidade = ? and c.estado = ?;\r\n                    \"\"\";\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setString(1, denuncia.getCategoria().name());\r\n                pstm.setDouble(2, localizacao.getLatitude());\r\n                pstm.setDouble(3, localizacao.getLongitude());\r\n                pstm.setString(4, localizacao.getCidade());\r\n                pstm.setString(5, localizacao.getEstado());\r\n\r\n                try (ResultSet rst = pstm.executeQuery()) {\r\n                    return rst.next(); // Retorna true se encontrou ao menos uma linha\r\n                }\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        } else {\r\n            PontoDeReferencia localizacao = (PontoDeReferencia) denuncia.getLocalizacao();\r\n            sql = \"\"\"\r\n                    SELECT d.categoria, p.nomePonto, p.cidade, p.estado\r\n                    FROM denuncia as d\r\n                    JOIN ponto_referencia as p on p.idDenuncia = d.idDenuncia\r\n                    WHERE d.categoria = ? and p.nomePonto = ? and p.cidade = ? and p.estado = ?;\r\n                    \"\"\";\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setString(1, denuncia.getCategoria().name());\r\n                pstm.setString(2, localizacao.getNome());\r\n                pstm.setString(3, localizacao.getCidade());\r\n                pstm.setString(4, localizacao.getEstado());\r\n\r\n                try (ResultSet rst = pstm.executeQuery()) {\r\n                    return rst.next(); // Retorna true se encontrou ao menos uma linha\r\n                }\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo ainda não está a retornar os telefones da pessoa\r\n    @Override\r\n    public Denuncia buscarPorId(int id) {\r\n        UsuarioDAO udao = new UsuarioDAO(connection);\r\n\r\n        Denuncia denuncia = null;\r\n\r\n        Localizacao localizacao = null;\r\n\r\n        try {\r\n            String sql = \"\"\"\r\n            SELECT d.idDenuncia, d.idCriador, d.titulo, d.categoria, d.descricao, d.dtDenuncia, ef.idEndereco, co.idCoordenada, pr.idPonto, v.valor_voto, v.idUsuario as idVotante, c.idUsuario as idConfirmador, m.idMidia\r\n            FROM denuncia as d\r\n            LEFT JOIN endereco_fixo as ef on ef.idDenuncia = d.idDenuncia\r\n            LEFT JOIN ponto_referencia as pr on pr.idDenuncia = d.idDenuncia\r\n            LEFT JOIN coordenadas as co on co.idDenuncia = d.idDenuncia\r\n            LEFT JOIN voto_prioridade as v on v.idDenuncia = d.idDenuncia\r\n            LEFT JOIN confirmacoes as c on c.idDenuncia = d.idDenuncia\r\n            LEFT JOIN midia as m on m.idDenuncia = d.idDenuncia\r\n            WHERE d.idDenuncia = ?;\r\n        \"\"\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n                pstm.execute();\r\n\r\n                try (ResultSet rst = pstm.getResultSet()) {\r\n                    while (rst.next()) {\r\n                        if (denuncia == null) {\r\n                            int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                            int idCriador = rst.getInt(\"idCriador\");\r\n                            Usuario criador = (Usuario) udao.buscarPorId(idCriador);\r\n\r\n                            String titulo = rst.getString(\"titulo\");\r\n                            Categoria categoria = Categoria.valueOf(rst.getString(\"categoria\"));\r\n                            String descricao = rst.getString(\"descricao\");\r\n                            LocalDateTime dtDenuncia = rst.getObject(\"dtDenuncia\", LocalDateTime.class);\r\n\r\n                            if (rst.getInt(\"idEndereco\") != 0) {\r\n                                int idEndereco = rst.getInt(\"idEndereco\");\r\n                                EnderecoFixoDAO edao = new EnderecoFixoDAO(connection);\r\n                                localizacao = (EnderecoFixo) edao.buscarPorId(idEndereco);\r\n\r\n                            } else if (rst.getInt(\"idPonto\") != 0) {\r\n                                int idPonto = rst.getInt(\"idPonto\");\r\n                                PontoDeReferenciaDAO pdao = new PontoDeReferenciaDAO(connection);\r\n                                localizacao = (PontoDeReferencia) pdao.buscarPorId(idPonto);\r\n\r\n                            } else if (rst.getInt(\"idCoordenada\") != 0) {\r\n                                int idCoordenada = rst.getInt(\"idCoordenada\");\r\n                                CoordenadasDAO cdao = new CoordenadasDAO(connection);\r\n                                localizacao = (Coordenadas) cdao.buscarPorId(idCoordenada);\r\n\r\n                            }\r\n\r\n                            denuncia = new Denuncia(idDenuncia, criador, titulo, categoria, descricao, localizacao, dtDenuncia);\r\n                        }\r\n\r\n                        // Adiciona voto\r\n                        int idVotante = rst.getInt(\"idVotante\");\r\n                        if (idVotante != 0) {\r\n                            Usuario votante = (Usuario) udao.buscarPorId(idVotante);\r\n                            int valor = rst.getInt(\"valor_voto\");\r\n                            denuncia.receberVoto(votante, valor);\r\n                        }\r\n\r\n                        // Adiciona confirmação\r\n                        int idConfirmador = rst.getInt(\"idConfirmador\");\r\n                        if (idConfirmador != 0) {\r\n                            Usuario confirmador = (Usuario) udao.buscarPorId(idConfirmador);\r\n                            denuncia.receberConfirmacao(confirmador);\r\n                        }\r\n\r\n                        // Adiciona mídia\r\n                        int idMidia = rst.getInt(\"idMidia\");\r\n                        if (idMidia != 0) {\r\n                            MidiaDAO mdao = new MidiaDAO(connection);\r\n                            Midia midia = (Midia) mdao.buscarPorId(idMidia);\r\n                            denuncia.addMidia(midia);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return denuncia;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Object> listarTodosLazyLoading() {\r\n        UsuarioDAO udao = new UsuarioDAO(connection);\r\n        ArrayList<Object> denuncias = new ArrayList<>();\r\n\r\n        try {\r\n            String sql = \"SELECT idDenuncia, idCriador, titulo, categoria, descricao, dtDenuncia FROM denuncia\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.execute();\r\n                ResultSet rst = pstm.getResultSet();\r\n                while (rst.next()) {\r\n                    int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                    int idCriador = rst.getInt(\"idCriador\");\r\n                    Usuario criador = (Usuario) udao.buscarPorId(idCriador);\r\n\r\n                    String titulo = rst.getString(\"titulo\");\r\n                    Categoria categoria = Categoria.valueOf(rst.getString(\"categoria\"));\r\n                    String descricao = rst.getString(\"descricao\");\r\n                    LocalDateTime dtDenuncia = rst.getObject(\"dtDenuncia\", LocalDateTime.class);\r\n\r\n                    Denuncia d = new Denuncia(idDenuncia, criador, titulo, categoria, descricao, null, dtDenuncia);\r\n                    denuncias.add(d);\r\n                }\r\n            }\r\n            return denuncias;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Object> listarTodosEagerLoading() {\r\n        UsuarioDAO udao = new UsuarioDAO(connection);\r\n        MidiaDAO mdao = new MidiaDAO(connection);\r\n        CoordenadasDAO cdao = new CoordenadasDAO(connection);\r\n        PontoDeReferenciaDAO pdao = new PontoDeReferenciaDAO(connection);\r\n        EnderecoFixoDAO edao = new EnderecoFixoDAO(connection);\r\n\r\n        ArrayList<Object> denuncias =new ArrayList<>();\r\n        Denuncia ultima = null;\r\n\r\n        Localizacao localizacao = null;\r\n\r\n        try {\r\n            String sql = \"\"\"\r\n            SELECT d.idDenuncia, d.idCriador, d.titulo, d.categoria, d.descricao, d.dtDenuncia, ef.idEndereco, co.idCoordenada, pr.idPonto, v.valor_voto, v.idUsuario as idVotante, c.idUsuario as idConfirmador, m.idMidia\r\n            FROM denuncia as d\r\n            LEFT JOIN endereco_fixo as ef on ef.idDenuncia = d.idDenuncia\r\n            LEFT JOIN ponto_referencia as pr on pr.idDenuncia = d.idDenuncia\r\n            LEFT JOIN coordenadas as co on co.idDenuncia = d.idDenuncia\r\n            LEFT JOIN voto_prioridade as v on v.idDenuncia = d.idDenuncia\r\n            LEFT JOIN confirmacoes as c on c.idDenuncia = d.idDenuncia\r\n            LEFT JOIN midia as m on m.idDenuncia = d.idDenuncia;\r\n        \"\"\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.execute();\r\n\r\n                try (ResultSet rst = pstm.getResultSet()) {\r\n                    while (rst.next()) {\r\n                        if (ultima == null || ultima.getIdDenuncia() != rst.getInt(1)) {\r\n                            int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                            int idCriador = rst.getInt(\"idCriador\");\r\n                            Usuario criador = (Usuario) udao.buscarPorId(idCriador);\r\n\r\n                            String titulo = rst.getString(\"titulo\");\r\n                            Categoria categoria = Categoria.valueOf(rst.getString(\"categoria\"));\r\n                            String descricao = rst.getString(\"descricao\");\r\n                            LocalDateTime dtDenuncia = rst.getObject(\"dtDenuncia\", LocalDateTime.class);\r\n\r\n                            if (rst.getInt(\"idEndereco\") != 0) {\r\n                                int idEndereco = rst.getInt(\"idEndereco\");\r\n                                localizacao = (EnderecoFixo) edao.buscarPorId(idEndereco);\r\n\r\n                            } else if (rst.getInt(\"idPonto\") != 0) {\r\n                                int idPonto = rst.getInt(\"idPonto\");\r\n                                localizacao = (PontoDeReferencia) pdao.buscarPorId(idPonto);\r\n\r\n                            } else if (rst.getInt(\"idCoordenada\") != 0) {\r\n                                int idCoordenada = rst.getInt(\"idCoordenada\");\r\n                                localizacao = (Coordenadas) cdao.buscarPorId(idCoordenada);\r\n\r\n                            }\r\n\r\n                            Denuncia denuncia = new Denuncia(idDenuncia, criador, titulo, categoria, descricao, localizacao, dtDenuncia);\r\n                            denuncias.add(denuncia);\r\n                            ultima = denuncia;\r\n                        }\r\n\r\n                        // Adiciona voto\r\n                        int idVotante = rst.getInt(\"idVotante\");\r\n                        if (idVotante != 0) {\r\n                            Usuario votante = (Usuario) udao.buscarPorId(idVotante);\r\n                            int valor = rst.getInt(\"valor_voto\");\r\n                            ultima.receberVoto(votante, valor);\r\n                        }\r\n\r\n                        // Adiciona confirmação\r\n                        int idConfirmador = rst.getInt(\"idConfirmador\");\r\n                        if (idConfirmador != 0) {\r\n                            Usuario confirmador = (Usuario) udao.buscarPorId(idConfirmador);\r\n                            ultima.receberConfirmacao(confirmador);\r\n                        }\r\n\r\n                        // Adiciona mídia\r\n                        int idMidia = rst.getInt(\"idMidia\");\r\n                        if (idMidia != 0) {\r\n                            Midia midia = (Midia) mdao.buscarPorId(idMidia);\r\n                            ultima.addMidia(midia);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return denuncias;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(Object objeto) {\r\n        if (!(objeto instanceof Denuncia)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Denuncia.\");\r\n        }\r\n\r\n        Denuncia denuncia = (Denuncia) objeto;\r\n\r\n        // Atualizar os dados principais da denúncia\r\n        String sql = \"UPDATE denuncia SET idCriador = ?, titulo = ?, categoria = ?, descricao = ?, dtDenuncia = ? WHERE idDenuncia = ?\";\r\n\r\n        try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n\r\n            pstm.setInt(1, denuncia.getCriador().getIdUsuario());\r\n            pstm.setString(2, denuncia.getTitulo());\r\n            pstm.setString(3, denuncia.getCategoria().name());\r\n            pstm.setString(4, denuncia.getDescricao());\r\n            pstm.setObject(5, denuncia.getData());\r\n            pstm.setInt(6, denuncia.getIdDenuncia());\r\n\r\n            int linhasAfetadas = pstm.executeUpdate();\r\n\r\n            if (linhasAfetadas == 0) {\r\n                throw new SQLException(\"Falha ao atualizar: nenhuma linha foi afetada.\");\r\n            }\r\n\r\n            // Atualizar os votos e confirmações separadamente\r\n            // Primeiro excluir todos os votos e denúncias, depois inserir todos os novos e atualizados\r\n            excluirVotos(denuncia);\r\n            salvarVotos(denuncia);\r\n\r\n            excluirConfirmacoes(denuncia);\r\n            salvarConfirmacoes(denuncia);\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(\"Erro ao atualizar denuncia: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void excluir(int id) {\r\n        try {\r\n            String sql = \"DELETE FROM denuncia WHERE idDenuncia = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n\r\n                int linhasAfetadas = pstm.executeUpdate();\r\n\r\n                if (linhasAfetadas == 0) {\r\n                    throw new SQLException(\"Falha ao deletar: nenhuma linha foi afetada.\");\r\n                }\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void excluirVotos(Denuncia denuncia) {\r\n        String sql;\r\n\r\n        try {\r\n            sql = \"DELETE FROM voto_prioridade WHERE idDenuncia = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, denuncia.getIdDenuncia());\r\n\r\n                int linhasAfetadas = pstm.executeUpdate();\r\n\r\n                if (linhasAfetadas == 0) {\r\n                    System.out.println(\"Aviso: a denúncia ainda não possui votos, ou ocorreu um erro, pois nenhuma linha foi afetada pela atualização.\");\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void salvarVotos(Denuncia denuncia) {\r\n        String sql = \"INSERT INTO voto_prioridade (idUsuario, idDenuncia, valor_voto) VALUES (?, ?, ?);\";\r\n\r\n        try {\r\n            for (Map.Entry<Usuario, Integer> entry : denuncia.getVotosPrioridade().entrySet()) {\r\n                try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                    pstm.setInt(1, entry.getKey().getIdUsuario());\r\n                    pstm.setInt(2, denuncia.getIdDenuncia());\r\n                    pstm.setInt(3, entry.getValue());\r\n\r\n                    pstm.execute();\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void excluirConfirmacoes(Denuncia denuncia) {\r\n        String sql = \"DELETE FROM confirmacoes WHERE idDenuncia = ?\";\r\n\r\n        try {\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, denuncia.getIdDenuncia());\r\n\r\n                int linhasAfetadas = pstm.executeUpdate();\r\n\r\n                if (linhasAfetadas == 0) {\r\n                    System.out.println(\"Aviso: a denúncia ainda não possui confirmações, ou ocorreu um erro, pois nenhuma linha foi afetada pela atualização.\");\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    public void salvarConfirmacoes(Denuncia denuncia) {\r\n        String sql = \"INSERT INTO confirmacoes (idUsuario, idDenuncia) VALUES (?, ?);\";\r\n\r\n        try {\r\n            for (Usuario u : denuncia.getConfirmacoes()) {\r\n                try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                    pstm.setInt(1, u.getIdUsuario());\r\n                    pstm.setInt(2, denuncia.getIdDenuncia());\r\n\r\n                    pstm.execute();\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/dao/DenunciaDAO.java b/SistemaDenuncias/src/dao/DenunciaDAO.java
--- a/SistemaDenuncias/src/dao/DenunciaDAO.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/dao/DenunciaDAO.java	(date 1749597707571)
@@ -116,7 +116,7 @@
         }
     }
 
-    //Metodo ainda não está a retornar os telefones da pessoa
+    //Metodo ainda não está retornando os telefones da pessoa
     @Override
     public Denuncia buscarPorId(int id) {
         UsuarioDAO udao = new UsuarioDAO(connection);
Index: SistemaDenuncias/src/dao/CoordenadasDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport modelo.Coordenadas;\r\nimport modelo.Denuncia;\r\nimport modelo.Midia;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class CoordenadasDAO implements BaseDAO {\r\n    private Connection connection;\r\n\r\n    public CoordenadasDAO(Connection connection) {\r\n        this.connection = connection;\r\n    }\r\n\r\n    @Override\r\n    public void salvar(Object objeto) {\r\n        if (!(objeto instanceof Coordenadas)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Coordenada.\");\r\n        }\r\n\r\n        Coordenadas coordenadas = (Coordenadas) objeto;\r\n\r\n        try {\r\n            String sql = \"INSERT INTO coordenadas (idDenuncia, latitude, longitude) VALUES (?, ?, ?)\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n                pstm.setObject(1, coordenadas.getDenuncia().getIdDenuncia());\r\n                pstm.setDouble(2, coordenadas.getLatitude());\r\n                pstm.setDouble(3, coordenadas.getLongitude());\r\n\r\n                pstm.execute();\r\n\r\n                try (ResultSet rst = pstm.getGeneratedKeys()) {\r\n                    while (rst.next()) {\r\n                        coordenadas.setIdCoordenada(rst.getInt(1));\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object buscarPorId(int id) {\r\n        DenunciaDAO ddao = new DenunciaDAO(connection);\r\n        try {\r\n            String sql = \"SELECT idCoordenada, idDenuncia, cidade, estado, latitude, longitude FROM coordenada WHERE idCoordenada = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n\r\n                pstm.execute();\r\n                ResultSet rst = pstm.getResultSet();\r\n                while (rst.next()) {\r\n                    int idCoordenada = rst.getInt(\"idCoordenada\");\r\n                    int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);\r\n                    String cidade = rst.getString(\"cidade\");\r\n                    String estado = rst.getString(\"estado\");\r\n                    Double latitude = rst.getDouble(\"latitude\");\r\n                    Double longitude = rst.getDouble(\"longitude\");\r\n                    return new Coordenadas(idCoordenada, denuncia, cidade, estado, latitude, longitude);\r\n                }\r\n            }\r\n            return null;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Object> listarTodosLazyLoading() {\r\n        DenunciaDAO ddao = new DenunciaDAO(connection);\r\n\r\n        ArrayList<Object> coordenadas = new ArrayList<>();\r\n\r\n        try {\r\n            String sql = \"SELECT idCoordenada, idDenuncia, cidade, estado, latitude, logitude FROM coordenadas\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.execute();\r\n                ResultSet rst = pstm.getResultSet();\r\n                while (rst.next()) {\r\n                    int idMidia = rst.getInt(\"idCoordenada\");\r\n                    int idDenuncia = rst.getInt(\"idDenuncia\");\r\n                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);\r\n                    String cidade = rst.getString(\"cidade\");\r\n                    String estado = rst.getString(\"estado\");\r\n                    Double latitude = rst.getDouble(\"cidade\");\r\n                    Double longitude = rst.getDouble(\"estado\");\r\n\r\n                    Coordenadas c = new Coordenadas(idMidia, denuncia, cidade, estado, latitude, longitude);\r\n                    coordenadas.add(c);\r\n                }\r\n            }\r\n            return coordenadas;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Object> listarTodosEagerLoading() {\r\n        return listarTodosLazyLoading();\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(Object objeto) {\r\n        if (!(objeto instanceof Coordenadas)) {\r\n            throw new IllegalArgumentException(\"Objeto deve ser do tipo Coordenadas.\");\r\n        }\r\n\r\n        Coordenadas coordenadas = (Coordenadas) objeto;\r\n\r\n        String sql = \"UPDATE coordenadas SET idDenuncia = ?, cidade = ?, estado = ?, latitude = ?, longitude = ? WHERE idCoordenada = ?\";\r\n\r\n        try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n\r\n            pstm.setInt(1, coordenadas.getDenuncia().getIdDenuncia());\r\n            pstm.setString(2, coordenadas.getCidade());\r\n            pstm.setString(3, coordenadas.getEstado());\r\n            pstm.setDouble(4, coordenadas.getLatitude());\r\n            pstm.setDouble(5, coordenadas.getLongitude());\r\n\r\n            int linhasAfetadas = pstm.executeUpdate();\r\n\r\n            if (linhasAfetadas == 0) {\r\n                throw new SQLException(\"Falha ao atualizar: nenhuma linha foi afetada.\");\r\n            }\r\n\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(\"Erro ao atualizar Coordenada: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void excluir(int id) {\r\n        try {\r\n            String sql = \"DELETE FROM coordenadas WHERE idCoordenada = ?\";\r\n\r\n            try (PreparedStatement pstm = connection.prepareStatement(sql)) {\r\n                pstm.setInt(1, id);\r\n\r\n                int linhasAfetadas = pstm.executeUpdate();\r\n\r\n                if (linhasAfetadas == 0) {\r\n                    throw new SQLException(\"Falha ao deletar: nenhuma linha foi afetada.\");\r\n                }\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/dao/CoordenadasDAO.java b/SistemaDenuncias/src/dao/CoordenadasDAO.java
--- a/SistemaDenuncias/src/dao/CoordenadasDAO.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/dao/CoordenadasDAO.java	(date 1749597707571)
@@ -1,162 +1,11 @@
 package dao;
 
-import modelo.Coordenadas;
-import modelo.Denuncia;
-import modelo.Midia;
+import java.sql.Connection;
 
-import java.sql.*;
-import java.util.ArrayList;
-
-public class CoordenadasDAO implements BaseDAO {
+public class CoordenadasDAO {
     private Connection connection;
 
     public CoordenadasDAO(Connection connection) {
         this.connection = connection;
     }
-
-    @Override
-    public void salvar(Object objeto) {
-        if (!(objeto instanceof Coordenadas)) {
-            throw new IllegalArgumentException("Objeto deve ser do tipo Coordenada.");
-        }
-
-        Coordenadas coordenadas = (Coordenadas) objeto;
-
-        try {
-            String sql = "INSERT INTO coordenadas (idDenuncia, latitude, longitude) VALUES (?, ?, ?)";
-
-            try (PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
-                pstm.setObject(1, coordenadas.getDenuncia().getIdDenuncia());
-                pstm.setDouble(2, coordenadas.getLatitude());
-                pstm.setDouble(3, coordenadas.getLongitude());
-
-                pstm.execute();
-
-                try (ResultSet rst = pstm.getGeneratedKeys()) {
-                    while (rst.next()) {
-                        coordenadas.setIdCoordenada(rst.getInt(1));
-                    }
-
-                }
-            }
-
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    public Object buscarPorId(int id) {
-        DenunciaDAO ddao = new DenunciaDAO(connection);
-        try {
-            String sql = "SELECT idCoordenada, idDenuncia, cidade, estado, latitude, longitude FROM coordenada WHERE idCoordenada = ?";
-
-            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
-                pstm.setInt(1, id);
-
-                pstm.execute();
-                ResultSet rst = pstm.getResultSet();
-                while (rst.next()) {
-                    int idCoordenada = rst.getInt("idCoordenada");
-                    int idDenuncia = rst.getInt("idDenuncia");
-                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);
-                    String cidade = rst.getString("cidade");
-                    String estado = rst.getString("estado");
-                    Double latitude = rst.getDouble("latitude");
-                    Double longitude = rst.getDouble("longitude");
-                    return new Coordenadas(idCoordenada, denuncia, cidade, estado, latitude, longitude);
-                }
-            }
-            return null;
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    public ArrayList<Object> listarTodosLazyLoading() {
-        DenunciaDAO ddao = new DenunciaDAO(connection);
-
-        ArrayList<Object> coordenadas = new ArrayList<>();
-
-        try {
-            String sql = "SELECT idCoordenada, idDenuncia, cidade, estado, latitude, logitude FROM coordenadas";
-
-            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
-                pstm.execute();
-                ResultSet rst = pstm.getResultSet();
-                while (rst.next()) {
-                    int idMidia = rst.getInt("idCoordenada");
-                    int idDenuncia = rst.getInt("idDenuncia");
-                    Denuncia denuncia = (Denuncia) ddao.buscarPorId(idDenuncia);
-                    String cidade = rst.getString("cidade");
-                    String estado = rst.getString("estado");
-                    Double latitude = rst.getDouble("cidade");
-                    Double longitude = rst.getDouble("estado");
-
-                    Coordenadas c = new Coordenadas(idMidia, denuncia, cidade, estado, latitude, longitude);
-                    coordenadas.add(c);
-                }
-            }
-            return coordenadas;
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    public ArrayList<Object> listarTodosEagerLoading() {
-        return listarTodosLazyLoading();
-    }
-
-    @Override
-    public void atualizar(Object objeto) {
-        if (!(objeto instanceof Coordenadas)) {
-            throw new IllegalArgumentException("Objeto deve ser do tipo Coordenadas.");
-        }
-
-        Coordenadas coordenadas = (Coordenadas) objeto;
-
-        String sql = "UPDATE coordenadas SET idDenuncia = ?, cidade = ?, estado = ?, latitude = ?, longitude = ? WHERE idCoordenada = ?";
-
-        try (PreparedStatement pstm = connection.prepareStatement(sql)) {
-
-            pstm.setInt(1, coordenadas.getDenuncia().getIdDenuncia());
-            pstm.setString(2, coordenadas.getCidade());
-            pstm.setString(3, coordenadas.getEstado());
-            pstm.setDouble(4, coordenadas.getLatitude());
-            pstm.setDouble(5, coordenadas.getLongitude());
-
-            int linhasAfetadas = pstm.executeUpdate();
-
-            if (linhasAfetadas == 0) {
-                throw new SQLException("Falha ao atualizar: nenhuma linha foi afetada.");
-            }
-
-
-        } catch (SQLException e) {
-            e.printStackTrace();
-            throw new RuntimeException("Erro ao atualizar Coordenada: " + e.getMessage());
-        }
-    }
-
-    @Override
-    public void excluir(int id) {
-        try {
-            String sql = "DELETE FROM coordenadas WHERE idCoordenada = ?";
-
-            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
-                pstm.setInt(1, id);
-
-                int linhasAfetadas = pstm.executeUpdate();
-
-                if (linhasAfetadas == 0) {
-                    throw new SQLException("Falha ao deletar: nenhuma linha foi afetada.");
-                }
-
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
 }
Index: SistemaDenuncias/src/modelo/Coordenadas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package modelo;\r\n\r\npublic class Coordenadas extends Localizacao {\r\n    private double longitude;\r\n    private double latitude;\r\n\r\n    public Coordenadas(Denuncia denuncia, String cidade, String estado, double longitude, double latitude) {\r\n        super(denuncia, cidade, estado);\r\n        this.longitude = longitude;\r\n        this.latitude = latitude;\r\n    }\r\n\r\n    // construtor do banco de dados\r\n    public Coordenadas(int idCoordenada, Denuncia denuncia, String cidade, String estado, double longitude, double latitude) {\r\n        super(denuncia, cidade, estado);\r\n        this.longitude = longitude;\r\n        this.latitude = latitude;\r\n    }\r\n\r\n    public double getLongitude() {\r\n        return longitude;\r\n    }\r\n\r\n    public double getLatitude() {\r\n        return latitude;\r\n    }\r\n\r\n    @Override\r\n    public String formatar() {\r\n        return \"Longitude: \" + this.longitude + \", Latitude: \" + this.latitude;\r\n    }\r\n\r\n    public void setIdCoordenada(int idCoordenada) {\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/modelo/Coordenadas.java b/SistemaDenuncias/src/modelo/Coordenadas.java
--- a/SistemaDenuncias/src/modelo/Coordenadas.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/modelo/Coordenadas.java	(date 1749597707586)
@@ -4,19 +4,12 @@
     private double longitude;
     private double latitude;
 
-    public Coordenadas(Denuncia denuncia, String cidade, String estado, double longitude, double latitude) {
+    public Coordenadas( Denuncia denuncia, String cidade, String estado, double longitude, double latitude) {
         super(denuncia, cidade, estado);
         this.longitude = longitude;
         this.latitude = latitude;
     }
 
-    // construtor do banco de dados
-    public Coordenadas(int idCoordenada, Denuncia denuncia, String cidade, String estado, double longitude, double latitude) {
-        super(denuncia, cidade, estado);
-        this.longitude = longitude;
-        this.latitude = latitude;
-    }
-
     public double getLongitude() {
         return longitude;
     }
@@ -29,7 +22,4 @@
     public String formatar() {
         return "Longitude: " + this.longitude + ", Latitude: " + this.latitude;
     }
-
-    public void setIdCoordenada(int idCoordenada) {
-    }
 }
Index: SistemaDenuncias/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import bd.ConnectionFactory;\r\nimport dao.DenunciaDAO;\r\nimport dao.UsuarioDAO;\r\nimport modelo.*;\r\n\r\nimport java.sql.Connection;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        // Conectando com o banco\r\n        ConnectionFactory fabricaDeConexao = new ConnectionFactory();\r\n        Connection connection = fabricaDeConexao.recuperaConexao();\r\n\r\n        // Criando DAOs\r\n        UsuarioDAO udao = new UsuarioDAO(connection);\r\n        DenunciaDAO ddao = new DenunciaDAO(connection);\r\n\r\n        // Iniciando testes\r\n        Localizacao local = new PontoDeReferencia(\"Rio de janeiro\", \"RJ\", \"Pedra grande no fim da esquina\", \"lá\");\r\n\r\n        Usuario u1 = new Usuario(\"Eduardo Peruzzo\", \"eduardo@email.com\", \"jorge\");\r\n        Denuncia d1 = new Denuncia(u1, \"Buraco enorme na frente da minha casa\", Categoria.BURACO_NA_RUA, \"Não consigo sair com o carro por causa desse buracão\", local, LocalDateTime.now());\r\n\r\n        udao.salvar(u1);\r\n        d1.persistirDenuncia(connection);\r\n\r\n        d1.receberVoto(u1, 9);\r\n        d1.receberVoto(u1, 8);\r\n\r\n        Usuario u2 = new Usuario(\"Estevão\", \"estevao@email.com\", \"jorge2\");\r\n\r\n        d1.receberVoto(u2, 10);\r\n        d1.receberConfirmacao(u2);\r\n\r\n        udao.salvar(u2);\r\n\r\n        ddao.atualizar(d1);\r\n\r\n        Denuncia d2 = new Denuncia(u1, \"Buraco enorme na frente da casa do vizinho\", Categoria.BURACO_NA_RUA, \"Não consigo sair com o carro por causa desse buracão\", local, LocalDateTime.now());\r\n        Denuncia d3 = new Denuncia(u2, \"Buraco enorme na frente da casa do vizinho\", Categoria.BURACO_NA_RUA, \"Não consigo sair com o carro por causa desse buracão\", local, LocalDateTime.now());\r\n\r\n        d2.persistirDenuncia(connection);\r\n        d3.persistirDenuncia(connection);\r\n\r\n        ArrayList<Object> denuncias = ddao.listarTodosEagerLoading();\r\n\r\n        for (Object denuncia : denuncias) {\r\n            System.out.println(denuncia);\r\n        }\r\n\r\n        Denuncia denunciaId1 = ddao.buscarPorId(1);\r\n        System.out.println(denunciaId1);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/Main.java b/SistemaDenuncias/src/Main.java
--- a/SistemaDenuncias/src/Main.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/Main.java	(date 1749597749835)
@@ -3,9 +3,12 @@
 import dao.UsuarioDAO;
 import modelo.*;
 
+import javax.xml.transform.Source;
 import java.sql.Connection;
+import java.sql.PreparedStatement;
 import java.time.LocalDateTime;
 import java.util.ArrayList;
+import java.util.Map;
 
 public class Main {
     public static void main(String[] args) {
@@ -19,6 +22,8 @@
 
         // Iniciando testes
         Localizacao local = new PontoDeReferencia("Rio de janeiro", "RJ", "Pedra grande no fim da esquina", "lá");
+        EnderecoFixo local2 = new EnderecoFixo("Santo André", "SP", "22790-555", "Av. Selector", "13.500", "Pedra");
+        local2.persistirEndereco(connection);
 
         Usuario u1 = new Usuario("Eduardo Peruzzo", "eduardo@email.com", "jorge");
         Denuncia d1 = new Denuncia(u1, "Buraco enorme na frente da minha casa", Categoria.BURACO_NA_RUA, "Não consigo sair com o carro por causa desse buracão", local, LocalDateTime.now());
@@ -52,5 +57,15 @@
 
         Denuncia denunciaId1 = ddao.buscarPorId(1);
         System.out.println(denunciaId1);
+        System.out.println("Votos da denúncia 1 ->");
+        for (Map.Entry<Usuario, Integer> entry : d1.getVotosPrioridade().entrySet()) {
+            System.out.println("Usuário: " + entry.getKey().getNome() + ", Voto: " + entry.getValue());
+        }
+        System.out.println("Média de votos da denúncia 1: " + d1.calcularMediaVotos());
+        System.out.println("Quantidade de confirmações da denúncia 1: " + d1.getConfirmacoes().size());
+        System.out.println("Usuários que confirmaram a denúncia 1 ->");
+        for (Usuario u : d1.getConfirmacoes()) {
+            System.out.println(u);
+        }
     }
 }
\ No newline at end of file
Index: SistemaDenuncias/src/dao/ComentarioDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/dao/ComentarioDAO.java b/SistemaDenuncias/src/dao/ComentarioDAO.java
new file mode 100644
--- /dev/null	(date 1749597749835)
+++ b/SistemaDenuncias/src/dao/ComentarioDAO.java	(date 1749597749835)
@@ -0,0 +1,163 @@
+package dao;
+
+import modelo.Comentario;
+import modelo.Denuncia;
+import modelo.EnderecoFixo;
+import modelo.Usuario;
+
+import java.sql.*;
+import java.util.ArrayList;
+
+public class ComentarioDAO {
+    private Connection connection;
+
+    public ComentarioDAO(Connection connection) {
+        this.connection = connection;
+    }
+
+    public void salvar(Object objeto){
+
+        if (!(objeto instanceof Comentario)) {
+            throw new IllegalArgumentException("Objeto deve ser do tipo Comentario.");
+        }
+
+        Comentario comentario = (Comentario) objeto;
+
+        try{
+            String sql = "INSERT INTO endereco_fixo (idAutor, idDenuncia, conteudo, data) VALUES(?,?,?,?)";
+
+            try(PreparedStatement pstm = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
+
+                pstm.setInt(1, comentario.getAutor().getIdUsuario()); //Define o primeiro ?
+                pstm.setInt(2, comentario.getDenuncia().getIdDenuncia()); //Define o segundo ?
+                pstm.setString(3, comentario.getConteudo()); //Define o terceiro ?
+                pstm.setDate(4, comentario.getData());
+
+                pstm.execute();
+
+                try (ResultSet rst = pstm.getGeneratedKeys()) {
+                    while (rst.next()) {
+                        comentario.setIdComentario(rst.getInt(1));
+                    }
+                }
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public Comentario buscarPorId(int id){
+        UsuarioDAO udao = new UsuarioDAO(connection);
+        DenunciaDAO ddao = new DenunciaDAO(connection);
+
+        Comentario comentario = null;
+
+        try {
+
+            String sql ="""
+                        SELECT idAutor, idDenuncia, conteudo, data
+                        FROM comentario
+                        WHERE idComentario = ?
+                        """;
+            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
+                pstm.setInt(1, id);
+                pstm.execute();
+                try(ResultSet rst = pstm.getResultSet()){
+                    while (rst.next()){
+                        if (comentario == null){
+                            String conteudo = rst.getString("conteudo");
+                            Date data = rst.getDate("data");
+                            int idAutor = rst.getInt("idAutor");
+                            int idDenuncia = rst.getInt("idDenuncia");
+                            Usuario autor = (Usuario) udao.buscarPorId(idAutor);
+                            Denuncia denuncia = ddao.buscarPorId(idDenuncia);
+
+                            comentario = new Comentario(id, autor, denuncia, conteudo, data);
+                        }
+                    }
+                }
+            }
+            return comentario;
+
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public ArrayList<Object> listarTodosLazyLoading() {
+        UsuarioDAO udao = new UsuarioDAO(connection);
+        DenunciaDAO ddao = new DenunciaDAO(connection);
+        ArrayList<Object> comentarios = new ArrayList<>();
+
+        try {
+            String sql = "SELECT idAutor, idDenuncia, conteudo, data FROM comentario";
+
+            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
+                pstm.execute();
+                ResultSet rst = pstm.getResultSet();
+                while (rst.next()) {
+                    int idAutor = rst.getInt("idAutor");
+                    int idDenuncia = rst.getInt("idDenuncia");
+                    Usuario autor = (Usuario) udao.buscarPorId(idAutor);
+                    Denuncia denuncia = ddao.buscarPorId(idDenuncia);
+                    String conteudo = rst.getString("conteudo");
+                    Date data = rst.getDate("data");
+
+                    Comentario comentario = new Comentario(autor, denuncia, conteudo, data);
+                    comentarios.add(comentario);
+                }
+            }
+            return comentarios;
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public void atualizar(Object objeto) {
+        if (!(objeto instanceof Comentario)) {
+            throw new IllegalArgumentException("Objeto deve ser do tipo Comentario.");
+        }
+
+        Comentario comentario = (Comentario) objeto;
+
+        // Atualizar os dados principais da denúncia
+        String sql = "UPDATE comentario SET idAutor = ? and idDenuncia = ? and conteudo = ? and data = ?";
+
+        try (PreparedStatement pstm = connection.prepareStatement(sql)) {
+
+            pstm.setInt(1, comentario.getAutor().getIdUsuario());
+            pstm.setInt(2, comentario.getDenuncia().getIdDenuncia());
+            pstm.setString(3, comentario.getConteudo());
+            pstm.setDate(4, comentario.getData());
+
+            int linhasAfetadas = pstm.executeUpdate();
+
+            if (linhasAfetadas == 0) {
+                throw new SQLException("Falha ao atualizar: nenhuma linha foi afetada.");
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+            throw new RuntimeException("Erro ao atualizar denuncia: " + e.getMessage());
+        }
+    }
+
+    public void excluir(int id) {
+        try {
+            String sql = "DELETE FROM comentario WHERE idComentario = ?";
+
+            try (PreparedStatement pstm = connection.prepareStatement(sql)) {
+                pstm.setInt(1, id);
+
+                int linhasAfetadas = pstm.executeUpdate();
+
+                if (linhasAfetadas == 0) {
+                    throw new SQLException("Falha ao deletar: nenhuma linha foi afetada.");
+                }
+
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
Index: SistemaDenuncias/src/modelo/Comentario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package modelo;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class Comentario implements Votavel {\r\n    private int idComentario;\r\n    private Usuario autor;\r\n    private Denuncia denuncia;\r\n    private String conteudo;\r\n    private LocalDateTime data;\r\n    private Set<Usuario> votos;\r\n\r\n    // Comentário que veio do banco\r\n    public Comentario(int idComentario, Usuario autor, Denuncia denuncia, String conteudo, LocalDateTime data) {\r\n        this.idComentario = idComentario;\r\n        this.autor = autor;\r\n        this.denuncia = denuncia;\r\n        this.conteudo = conteudo;\r\n        this.data = data;\r\n\r\n        this.votos = new HashSet<Usuario>();\r\n    }\r\n\r\n    // Comentário novo, sem ID e nem votos\r\n    public Comentario(Usuario autor, Denuncia denuncia, String conteudo, LocalDateTime data) {\r\n        this.autor = autor;\r\n        this.denuncia = denuncia;\r\n        this.conteudo = conteudo;\r\n        this.data = data;\r\n\r\n        this.votos = new HashSet<Usuario>();\r\n    }\r\n\r\n    public int getIdComentario() {\r\n        return idComentario;\r\n    }\r\n\r\n    public Usuario getAutor() {\r\n        return autor;\r\n    }\r\n\r\n    public Denuncia getDenuncia() {\r\n        return denuncia;\r\n    }\r\n\r\n    public String getConteudo() {\r\n        return conteudo;\r\n    }\r\n\r\n    public LocalDateTime getData() {\r\n        return data;\r\n    }\r\n\r\n    public Set<Usuario> getVotos() {\r\n        return votos;\r\n    }\r\n\r\n    public void setIdComentario(int idComentario) {\r\n        this.idComentario = idComentario;\r\n    }\r\n\r\n    public void receberVoto(Usuario u, Integer voto) {\r\n        votos.add(u);\r\n    }\r\n    public void removerVoto(Usuario u) {\r\n        votos.remove(u);\r\n    }\r\n\r\n    public void editarComentario(String novoConteudo) {\r\n        this.conteudo = novoConteudo;\r\n    }\r\n\r\n    public int numeroVotos () {\r\n        return votos.size();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SistemaDenuncias/src/modelo/Comentario.java b/SistemaDenuncias/src/modelo/Comentario.java
--- a/SistemaDenuncias/src/modelo/Comentario.java	(revision 3299be7c763f45515bc1121cfa0fc8ee2aefe0e6)
+++ b/SistemaDenuncias/src/modelo/Comentario.java	(date 1749597749835)
@@ -1,6 +1,6 @@
 package modelo;
 
-import java.time.LocalDateTime;
+import java.sql.Date;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -9,11 +9,11 @@
     private Usuario autor;
     private Denuncia denuncia;
     private String conteudo;
-    private LocalDateTime data;
+    private Date data;
     private Set<Usuario> votos;
 
     // Comentário que veio do banco
-    public Comentario(int idComentario, Usuario autor, Denuncia denuncia, String conteudo, LocalDateTime data) {
+    public Comentario(int idComentario, Usuario autor, Denuncia denuncia, String conteudo, Date data) {
         this.idComentario = idComentario;
         this.autor = autor;
         this.denuncia = denuncia;
@@ -24,7 +24,7 @@
     }
 
     // Comentário novo, sem ID e nem votos
-    public Comentario(Usuario autor, Denuncia denuncia, String conteudo, LocalDateTime data) {
+    public Comentario(Usuario autor, Denuncia denuncia, String conteudo, Date data) {
         this.autor = autor;
         this.denuncia = denuncia;
         this.conteudo = conteudo;
@@ -49,7 +49,7 @@
         return conteudo;
     }
 
-    public LocalDateTime getData() {
+    public Date getData() {
         return data;
     }
 
